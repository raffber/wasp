#!/usr/bin/env python3
# encoding: UTF-8
"""
This code is public domain.

This script unpacks the wasp build tool and should be checked into vcs
repositories.
"""

# PYTHON_ARGCOMPLETE_OK

import sys
import os
import zlib
import binascii
import importlib

UNPACK_DIR = '.wasp'


class WaspInstallationError(RuntimeError):
    def __init__(self, msg):
        super().__init__(msg)


def unpack(unpack_dir):
    if not os.path.exists(unpack_dir):
        os.mkdir(unpack_dir)
    for item in wasp_packed:
        filename, content = item
        dirname = os.path.dirname(filename)
        if dirname != '':
            dirname = os.path.join(unpack_dir, dirname)
            if not os.path.exists(dirname):
                os.makedirs(dirname, exist_ok=True)
        fname = os.path.join(unpack_dir, filename)
        with open(fname, 'w') as f:
            compressed = binascii.a2b_base64(content)
            data = zlib.decompress(compressed)
            s = data.decode('UTF-8')
            f.write(s)

def main(major, minor, point):
    script = sys.argv[0]
    script = os.path.realpath(script)
    cur_dir = os.path.dirname(script)
    os.chdir(cur_dir)
    unpack_dir = os.path.join(cur_dir, UNPACK_DIR)
    if not os.path.exists(unpack_dir):
        unpack(unpack_dir)
    sys.path.append(unpack_dir)
    try:
        try:
            wasp = __import__('wasp')
            v = wasp.version
            if v.major != major or v.minor != minor or v.point != point:
                unpack(unpack_dir)
                wasp = importlib.reload(wasp)
        except:
            unpack(unpack_dir)
            wasp = importlib.reload(wasp)
    except ImportError:
        raise WaspInstallationError('Something went wrong during the installation. Does {0} directory with all wasp files exist?'.format(UNPACK_DIR))
    from wasp.main import run
    success = run(cur_dir)
    if success:
        sys.exit(0)
    else:
        sys.exit(1)


