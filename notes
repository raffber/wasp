Next Task
==========

Current:
---------


Next
-----

 * t.log.info(t.log.format_success('Created wasp.')) => t.log.success()
 * allow customizing build directory

 * test, test, test, test and write doc
 * port to windows
 * port to pypy

Cpp Tool
========

 * ':/cpp/source.c' => source.c.o (executed if target changed)
 * source.c, all headers from ':/cpp/source.c' => ':/cpp/source.c'
 * ':/cpp/source.c' contains combined checksum of source.c and all its headers


Bugs
=======

 * Error message must be better: MissingArgumentError: Missing argument for task: Required argument ":qt/moc" is empty.
    => task should keep trace of where it was created.
 * searching only for 'moc' must not lead /usr/bin/qtchooser!!
 * Found file `/usr/lib/qt/bin/moc` in `/usr/bin` ???
 * tasks spawned during check() are not returned from execute()... I guess??
 * clean does not delete all files in build/...


Lower Priorieties/Questions
============================

 * enusre correct quote() of command line args
 * add commandline options to tools
 * Allow specifying different build directories (for different combinations of
    build flags)
 * Possibly remove task.key and replace with id(task)
 * create globalwasp which dispatches to local wasp script (walks up the tree until a wasp script is found)
    -> automatically invokes --target . which builds all targets of current dir. can be disabled with -a/--all
 * API to trigger command rerun
    -> maybe outgoing nodes of each command should be checked to determine if a command must be rerun
 * do not allow ' ' for option names, apply the same rule as for argument names
 * rename :def_main nodes to :def/main
 * maybe spawn isn't acutally required?!
    -> think about what can be done with nodes
    -> Spawn could only be used for checks()
 * optmize on task.touched()
 * optimize on task.noop()
 * make SymbolicNode dict-like for retrieving arguments => inherit ArgumentCollection?
 * add introspection for Task(fun=function) if function does not take any arguments,
    don't call it with task
 * autoconfigure log for tasks based on decorator config
 * options: autoload?!
 * progress bar! -> extension?!
 * ShellTask: are arguments properly quoted?
 * check this: is node refresh always parallelized?!
 * allow ctx.g('subdir')? such that variables can be scoped => ctx.g(__file__)
 * check if relto is honored all the time str(path) should return standardized
    reperesentation
 * create a boolean node.... as in run_if(fun, task) -> TriggerNode
 * improve error output, somehow identify task if MissingArgumentError
 * remove the number of pitfalls
    -> collect them
    -> fix them
 * task.parallel must exist (e.g. for invoking external pkg managers)
 * in case of invalid json, ALWAYS raise ValueError! => replace assert with parse_assert
 * sync on log => no ugly race conditions in output
    --> with self.log: ...
 * better --help formatting: actually show descriptions
 * tidy up imports
 * refactor realpath to abspath
 * set default verbosity to info?!
 * binary json?! maybe implmented by myself?
 * yaml subset which can be translated to json (a.k.a yson)
    -> or CSON?! <- should be added to util library
 * invocation from recursive directory: how to deduce topdir?!
 * simplify global bashcompletion activation
 * verbosity per decorator (use command class, assign all tasks their logger just after calling a command)
 * argumentprovider => register, such that retireve(asdf) works automatically by dispatching. => singledispatch?
 * util.Namespace class => inherit metadata, decoratorstore from it
 * escape : in filename (.replace('\:', ':') at str[0:1])
 * proper subproject handling (implemented as plugin to the recursion algorithm)
 * could we integrate pip, easy_install? just install extensions as eggs? => test for import pip
   - if sth. is missing (e.g. templates, make it automatically installable)
   - install it to wasp temporary directory
   - if globally installed create wasp temporary directory
   - pip install --install-option="--prefix=$PREFIX_PATH" package_name
 * find a way to name arguments using the symbolic node name
    -> namespace the arguments
 * benchmark --> make things faster
 * egrep -rni NotImplementedError src/ | grep TODO


Discared Ideas
===============

 * what happens if compile flags are changed?
    -> task needs to have a .name() and a .hash() function
    -> .name() must not change between invocations of ./wasp
        -> default impl: hash(self.__class__.__name) + hash(self.sources) + hash(self.targets)
        -> suclassed: super().name() + hash(self._privatevar)
    -> .hash() must change if config is changed
        -> default: self.name() + hash(self.arguments)
        -> suclassed: super().hash() + hash(self._privatevar)


=> ArgumentProviderBase
    -> defines __getitem__ and __setitem__
=> overrides: task.overrides.append(provider)
=> ArgumentProvider(ArgumentProviderBase)
    -> .limit(keys) limits the keys available
    -> provider(..., keys=[]) creates an argumentprovider and limits with keys
=> what about not overriding arguments by default?!
    -> maybe don't override arg if already there? (in check())




Global Installation and call from subdirectory
==============================================

note, that at the moment global installation of wasp is not possible
The implementation of this ``feature`` does not have particular priority, since
it is not the intended design of wasp. Though it might be useful for performance enhancement.

 * make sure local install has precedence over global install
 * subfiles must know the the topdir
 * with each command, save its origin with inspect.<whatever>()
 * if invoked in a subdir, only execute the commands in there
 * determining topdir: travel up in the path until:
    -> a .wasptop is found
    -> create .wasptop file automatically
    -> either gitignore or check-in

Pitfalls
========

 * better communicate if you forget to add a task
    i.e. if a task is used() but never added, this should somehow be detected
 * possibly make a pitfalls handler where information is collected

Tools
--------------

 * cargo/rust
 * cpp
 * qt
 * latex


subproject Extension
------------------

 * think about plugin api such that possible, what kind of hooks are required?
 * automatically add options for activating subprojects
 * wasp.subproject.activate.only('doc') or wasp.subproject.activate.except('doc')
 * same with deactivate
 * options --<subprojname> and --no-<subprojname> --all --none

Extensions
-----------

 * templates (fetch using git from external repo, copy over, keep a template-readme.txt)
    - register a command init-template
 * gui (tkinter)
    - run commands
    - edit arguments => use a visitor for option types and support single dispatch to extend
    - display depenency tree?!
 * think about background daemons (daemon autostart extension?!) Daemon('adsf').ensure_running().produce(':daemon')
    --> openocd
    --> gdb server


Removal of global variables
===========================

 * see if this is an issue -> if yes, implement this in a separate branch
    -> probably not going to happen, since most likely, this is a non-issue
 * possibly use some dependency injection algorithm
    -> default argument could be   def whatever(ctx=inject('ctx')): ....
 * inject a context into the loaded modules?
 * provide a set of clever macros which allows capturing context
 * make a default context global?! retrieve ctx automatically if not provided
 * pass the context everywhere
 * port signature stuff into context again
 * allow passing ctx to the fs components
 * how to handle decorators?!
    --> couple the decorator to a context with module imports
    --> this can be accomplished by locking on a global object
    --> create_context() may create a new context based on an old one.

Ideas for more features
=======================

 * create an internal package manager similiar to pip, npm or maven
 * create a declarative interface, reducing build.py to sth like wasp.from_json('build.json')
 * create an extension api and allow fetching extensions with the package manager
 * integrate the build system with vcs-tools such as git (providing hooks)
 * create an extension for code checkers
 * allow outputting projects for IDEs
 * create a flask web app for managing unittests and more
 * create a curses-gui for project configuration (sth like kconfig of linux kernel??)
 * create an extension for deployment tasks (e.g. directly deploy a web app to the server)
