Next Task
==========

 * implement options => implement an option that consumes several more...
 * enable building only a specific target with: ./wasp <command> --target :whatever

 * finish d tool with find task => see what can be imported into core
 * test, test, test, test and write doc

TODOs
========

 * extensions => think about what they should be able to do

Bugs
=======

 * in case of invalid json, ALWAYS raise ValueError! => replace assert with parse_assert
 * md is run always?!
 * `./wasp build build` gives: 'No build file found. Exiting.'

Lower Priorieties
===================

 * improve keyboard handling of interrupts during execution
 * verbosity per decorator (use command class, assign all tasks their logger just after calling a command)
 * argumentprovider => register, such that retireve(asdf) works automatically by dispatching. => singledispatch?
 * util.Namespace class for decorator => inherit metadata, decoratorstore from it
 * improve ctx.commands API
 * optimize execution, detect if task is a noop => check all lists empty, and look if _run overridden
 * make sure thread safety is ensured if symbolic nodes are written, i.e. write them upon completion, result is just argument collection
 * escape : in filename (.replace('\:', ':') at str[0:1])
 * proper subproject handling (implemented as plugin to the recursion algorithm)
 * some way to make commands run again if specified implict as a dependency for another command and the former has already
   completed successfully. Use case might be an updated git repo which gets pulled in by "./wasp fetch" and should be updated
   regularly. => ctx.commands['configure'].invalidate()
 * refactor signature identifier to key: generally, refactor all "identifier" to "key"

Random thoughts
---------------

 * could we integrate pip, easy_install? just install extensions as eggs? => test for import pip


Global Installation and call from subdirectory
==============================================


# TODO: note, that at the moment global installation of wasp is not possible
        The implementation of this ``feature`` does not have particular priority, since
        it is not the intended design of wasp. Though it might be useful for performance enhancement.

 * subfiles must know the the topdir
 * with each command, save its origin with inspect.<whatever>()
 * if invoked in a subdir, only execute the commands in there


subproject Extension
------------------

 * think about plugin api such that possible, what kind of hooks are required?
 * automatically add options for activating subprojects
 * wasp.subproject.activate.only('doc') or wasp.subproject.activate.except('doc')
 * same with deactivate
 * options --<subprojname> and --no-<subprojname> --all --none

Extensions
-----------

 * templates (fetch using git from external repo, copy over, keep a template-readme.txt)
 * gui (tkinter)
 * bashcompletion


Declarative
============

 * declarative tag handlers => register with factory
 * use yaml or json as markup - yaml has dependency ;(
 * run in init handler wasp.run_declarative('build.yml', format=None) infers format with 'json' => json, 'yml' => yaml


'options' : {
    'optimization' : ['debug', 'release']
}

'argument' : {
    'CFLAGS' : {
        ....
    }
}

'commands' : {
    'build' : {
        'files' : '*.c',
        'tool' : 'cpp',
        'command' : 'compile',
        'clean' : false,
        'use' : {
            'CFLAGS' : [
                    {
                        'argument' : 'CFLAGS'
                    },
                    {
                        'switch' : 'optimization',
                        'results' : {
                            'debug' : '-g -O0',
                            'release' : '-g -O0'
                    },
                    '--shared'
                ],
            }
        }
    }
}
