Next Task
==========

 * test, test, test, test and write doc
 * port to windows

 * cleanup watch
    -> don't run another command, just run the stuff returned by
        watch()
 * find task
    -> allow finding files (filename, directories)
    -> inherited task for finding libraries (*.dll, lib*.so)
    -> inherited task for finding executables
 * improve deployment
    => minify, compress, pyz?!
    => improve generation script, move to dist/
    => provide pre-built files in pre-built/
 * allow merged stdout, stdin output
    => default if no pretty printing activated
    => allow shell task printing customization -> inject default printer

Bugs
=======

 * watch: second execution fails => File "/home/raff/raffbuild/src/wasp/node.py", line 34, in has_changed
            if sig != self.signature(ns=ns):
          File "/home/raff/raffbuild/src/wasp/signature.py", line 108, in __eq__
            return not self.__ne__(other)
          File "/home/raff/raffbuild/src/wasp/signature.py", line 111, in __ne__
            return not other.valid or not self._valid or self._value != other.value
        AttributeError: 'SymbolicNode' object has no attribute 'valid'
 * format_multiline_message does not split strings properly
 * sync on log => no ugly race conditions in output
 * in case of invalid json, ALWAYS raise ValueError! => replace assert with parse_assert


Lower Priorieties/Questions
============================

 * documentation: find out how to properly link to member function in different modules and simliar
 * what is --verror used for?
 * binary json?! maybe implmented by myself?
 * yaml subset which can be translated to json
 * invocation from recursive directory: how to deduce topdir?!
 * simplify global bashcompletion activation
 * verbosity per decorator (use command class, assign all tasks their logger just after calling a command)
 * argumentprovider => register, such that retireve(asdf) works automatically by dispatching. => singledispatch?
 * util.Namespace class => inherit metadata, decoratorstore from it
 * improve ctx.commands API
 * escape : in filename (.replace('\:', ':') at str[0:1])
 * proper subproject handling (implemented as plugin to the recursion algorithm)
 * some way to make commands run again if specified implict as a dependency for another command and the former has already
   completed successfully. Use case might be an updated git repo which gets pulled in by "./wasp fetch" and should be updated
   regularly. => ctx.commands['configure'].invalidate(): REQUIRES: improved command api
 * could we integrate pip, easy_install? just install extensions as eggs? => test for import pip
   - if sth. is missing (e.g. templates, make it automatically installable)
   - install it to wasp temporary directory
   - if globally installed create wasp temporary directory
   - pip install --install-option="--prefix=$PREFIX_PATH" package_name


Global Installation and call from subdirectory
==============================================

note, that at the moment global installation of wasp is not possible
The implementation of this ``feature`` does not have particular priority, since
it is not the intended design of wasp. Though it might be useful for performance enhancement.

 * make sure local install has precedence over global install
 * subfiles must know the the topdir
 * with each command, save its origin with inspect.<whatever>()
 * if invoked in a subdir, only execute the commands in there
 * in wasp.fs: how to deduce topdir?!


subproject Extension
------------------

 * think about plugin api such that possible, what kind of hooks are required?
 * automatically add options for activating subprojects
 * wasp.subproject.activate.only('doc') or wasp.subproject.activate.except('doc')
 * same with deactivate
 * options --<subprojname> and --no-<subprojname> --all --none

Extensions
-----------

 * templates (fetch using git from external repo, copy over, keep a template-readme.txt)
    - register a command init-template
 * gui (tkinter)
    - run commands
    - edit arguments => use a visitor for option types and support single dispatch to extend
    - display depenency tree?!
 * think about background daemons (daemon autostart extension?!) Daemon('adsf').ensure_running().produce(':daemon')
    --> openocd
    --> gdb server


Removal of global variables
===========================

 * see if this is an issue -> if yes, implement this in a separate branch
    -> probably not going to happen, since most likely, this is a non-issue
 * possibly use some dependency injection algorithm
    -> default argument could be   def whatever(ctx=inject('ctx')): ....
 * inject a context into the loaded modules?
 * provide a set of clever macros which allows capturing context
 * make a default context global?! retrieve ctx automatically if not provided
 * pass the context everywhere
 * port signature stuff into context again
 * allow passing ctx to the fs components
 * how to handle decorators?!
    --> couple the decorator to a context with module imports
    --> this can be accomplished by locking on a global object
    --> create_context() may create a new context based on an old one.

Ideas for more features
=======================

 * create an internal package manager similiar to pip, npm or maven
 * create a declarative interface, reducing build.py to sth like wasp.from_json('build.json')
 * create an extension api and allow fetching extensions with the package manager
 * integrate the build system with vcs-tools such as git (providing hooks)
 * create an extension for code checkers
 * allow outputting projects for IDEs
 * create a flask web app for managing unittests and more
 * create a curses-gui for project configuration (sth like kconfig of linux kernel??)
 * create an extension for deployment tasks (e.g. directly deploy a web app to the server)
